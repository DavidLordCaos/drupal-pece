<?php
/**
 * @file
 * Code for the PECE Bibliography feature.
 */

include_once 'pece_biblio.features.inc';

/**
 * Implements hook_pece_install_tasks().
 */
function pece_biblio_pece_install_tasks() {
  $tasks = array();

  // $tasks = array(
  //   'pece_biblio_zotero' => array(
  //     'display_name' => st('Configure Zotero'),
  //     'type' => 'form',
  //   ),
  // );

  return $tasks;
}

/**
 * Callback form for "Configure Zotero" task.
 */
function pece_biblio_zotero($form, &$form_state) {
  drupal_set_title(st('Configure Zotero integration'));

  $form['intro'] = array(
    '#markup' => '<p>' . st('You can optionally configure PECE to import bibliography items from Zotero.') .
      '<br><small>' . st('Safely ignore this step if you don\'t use Zotero or if you don\'t want this integration.') . '</small></p>',
  );

  return $form;
}

/**
 * Implements hook_form_node_form_alter().
 */
function pece_biblio_form_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->type == 'zotero_feed') {
    $type = node_type_get_type($form['#node']);

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#default_value' => $form['#node']->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }
}

/**
 * Implements hook_feeds_after_save().
 */
function pece_biblio_feeds_after_save($source, $entity, $item, $entity_id) {
  $is_new = empty($entity_id);

  if ($is_new && $entity->feeds_item->id == 'zotero_feed' && !empty($item['itemType'])) {
    $function = "pece_biblio_feeds_after_save__zotero_feed__{$item['itemType']}";
    if (function_exists($function)) {
      $function($source, $entity, $item, $entity_id);
    }
  }
}

/**
 * Custom feeds_after_save hook for Zotero items.
 */
function pece_biblio_feeds_after_save__zotero_feed__blogPost($source, $entity, $item, $entity_id) {
  pece_biblio_feeds_after_save__zotero_feed__website($source, $entity, $item, $entity_id);
}

/**
 * Creates a website artifact based on a website bibliography import from Zotero.
 */
function pece_biblio_feeds_after_save__zotero_feed__website($source, $biblio, $item, $entity_id) {
  $websites = (new EntityFieldQuery())->entityCondition('entity_type', 'node')
    ->propertyCondition('title', $biblio->title)
    ->propertyCondition('type', 'pece_artifact_website')
    ->range(0, 1)
    ->execute();

  if (!empty($websites)) {
    return;
  }

  module_load_include('inc', 'pathauto');

  $properties = array(
    'type' => 'pece_artifact_website',
    'uid' => $biblio->uid,
    'status' => 1,
    'comment' => 1,
    'promote' => 0,
  );

  $website_node = entity_create('node', $properties);
  $website = entity_metadata_wrapper('node', $website_node);

  $website->title->set($biblio->title);
  $website->field_pece_uri->set('artifact/website/' . pathauto_cleanstring($biblio->title));
  $website->field_pece_bibliography->set(array(intval($biblio->nid)));
  $website->field_pece_website_url->set(array('url' => $biblio->biblio_url, 'title' => '', 'attributes' => array()));

  // Force empty value for field which has default value.
  $website_node->field_pece_license = array();

  node_save($website_node);
}
